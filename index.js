// Turkish to English character conversion map
const turkishToEnglish = {
  '√ß': 'c', '√á': 'C',
  'ƒü': 'g', 'ƒû': 'G',
  'ƒ±': 'i', 'I': 'I',
  '√∂': 'o', '√ñ': 'O',
  '≈ü': 's', '≈û': 'S',
  '√º': 'u', '√ú': 'U'
};

function convertTurkishToEnglish(text) {
  return text.replace(/[√ß√áƒüƒûƒ±I√∂√ñ≈ü≈û√º√ú]/g, char => turkishToEnglish[char] || char);
}

function isValidUrl(string) {
  try {
    new URL(string);
    return true;
  } catch (_) {
    return false;
  }
}

export default {
  async fetch(req, env) {
    const url = new URL(req.url);
    const path = url.pathname;

    // Serve main page from assets
    if (req.method === 'GET' && path === '/') {
      try {
        const htmlFile = await env.ASSETS.fetch(new Request('/index.html'));
        return new Response(await htmlFile.text(), {
          headers: { 'Content-Type': 'text/html; charset=utf-8' }
        });
      } catch (error) {
        return new Response('Ana sayfa y√ºklenemedi', { status: 500 });
      }
    }

    // Handle form submission
    if (req.method === 'POST' && path === '/') {
      try {
        const formData = await req.formData();
        let id = formData.get('id')?.toString().trim();
        const domain = formData.get('domain')?.toString().trim();

        if (!id || !domain) {
          return new Response("‚ùå Eksik bilgi girdiniz!", { 
            status: 400,
            headers: { 'Content-Type': 'text/html; charset=utf-8' }
          });
        }

        // Validate URL
        if (!isValidUrl(domain)) {
          return new Response("‚ùå Ge√ßersiz URL formatƒ±! https:// ile ba≈ülayan tam URL girin.", { 
            status: 400,
            headers: { 'Content-Type': 'text/html; charset=utf-8' }
          });
        }

        // Convert Turkish characters to English
        const originalId = id;
        id = convertTurkishToEnglish(id);
        
        // Clean up ID (remove special characters, spaces, etc.)
        id = id.toLowerCase()
                .replace(/[^a-z0-9\-_]/g, '-')
                .replace(/-+/g, '-')
                .replace(/^-|-$/g, '');

        if (id.length < 1) {
          return new Response("‚ùå Ge√ßersiz ID! En az 1 karakter olmalƒ±.", { 
            status: 400,
            headers: { 'Content-Type': 'text/html; charset=utf-8' }
          });
        }

        // Check if ID already exists
        const existing = await env.LINKS.get(id);
        if (existing) {
          return new Response(`‚ö†Ô∏è Bu ID zaten kullanƒ±lƒ±yor! "${id}" ba≈üka bir URL'e y√∂nlendiriyor.`, {
            status: 409,
            headers: { 'Content-Type': 'text/html; charset=utf-8' }
          });
        }

        // Save the link
        await env.LINKS.put(id, domain);
        
        let responseMessage = `üéâ Ba≈üarƒ±yla olu≈üturuldu! <strong>${id}</strong> ‚Üí ${domain}`;
        
        if (originalId !== id) {
          responseMessage += `<br><small>üí° T√ºrk√ße karakterler ƒ∞ngilizceye √ßevrildi: "${originalId}" ‚Üí "${id}"</small>`;
        }

        return new Response(responseMessage, {
          headers: { 'Content-Type': 'text/html; charset=utf-8' }
        });

      } catch (error) {
        return new Response("‚ùå Sunucu hatasƒ± olu≈ütu!", { 
          status: 500,
          headers: { 'Content-Type': 'text/html; charset=utf-8' }
        });
      }
    }

    // Handle redirect requests
    const id = path.slice(1);
    if (id) {
      const target = await env.LINKS.get(id);
      if (target) {
        return Response.redirect(target, 302);
      }
    }

    // 404 page from assets
    try {
      const notFoundFile = await env.ASSETS.fetch(new Request('/404.html'));
      return new Response(await notFoundFile.text(), { 
        status: 404,
        headers: { 'Content-Type': 'text/html; charset=utf-8' }
      });
    } catch (error) {
      return new Response('404 - Sayfa bulunamadƒ±', { 
        status: 404,
        headers: { 'Content-Type': 'text/html; charset=utf-8' }
      });
    }
  }
}
